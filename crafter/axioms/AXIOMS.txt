AXIOMATIC RULES:
- all equations are collections of tokens transitioning to other tokens (tokens_before => tokens_after)
- a token is text or emojis separated by whitespace
- each token represents an aspect of the global state which is changing
- for => relationships, tokens on the left are being consumed (rendered inert) and tokens on the right are being produced (rendered active)
- any token used on both sides is unchanged and acts as a catalyst (these enable conditional/if statements)
- any token can be substituted for an equivalent token (marked by <=> relationship)
- as a trivial extension of the above, tokens with quantities (e.g. 🍎3) can be used instead of creating separate tokens for each quantity
- the purpose of this system is to be as expressive as possible without resorting to too much additional logic
- this system uses immutable rules and tokens to map out global state transitions
- please avoid any additional extensions to the basic logic beyond these axioms
- this means (for now): no multiplication, no division, no modulo, no bitwise operators, no indexing, no arrays, etc.
- many of the above can be implemented in these rules, but are generally better off remaining simple unless really needed to reduce verbosity
- in general, these axiom production rules should be seen as simple functions, consuming inputs and producing outputs

Two more tools of this system are:
- listeners: e.g. current_square(🧍) move_left => left_square(🧍)
  - use listeners as pointers to subsections of the global state (trivially: all tokens prefixed by the listener)
  - the above is saying "if player is in the current square and we move left, then the player is in the left square"
  - equivalently: remove the player from current square, add it to the left square
  - equivalently: current_square_player move_left => left_square_player  (but this creates new tokens instead of just using subsets)
- ❗ priority: if two rules are possible at the same time, use the one with the ❗ priority flag
  - this enables if/else logic, if-zero logic, and guarantees win/lose/error checks if possible

Special tokens:
- 🎬 <=> GAME_START  # start token, never produced except by the execution logic (resets should use an intermediate token)
- 🏁 <=> GAME_END  # end token, never consumed except by the execution logic to stop execution (resets should use an intermediate token)
- ⌛ <=> STEP  # time step token, produced by the system clock event loop and passed to each grid square to enable syncronous time-based rules


# special
🎬 <=> GAME_START
⌛ <=> STEP
🏁 <=> GAME_END

# init
🎬 => ⏹️↔️64 ⏹️↕️64 🌐 👣 👣(🧍) ⏰ 🏆 🎮⌛
  # start with one 🏆 so it's non-negative when hp loss
⏹️↔️ <=> grid_width
⏹️↕️ <=> grid_height
🌐 <=> grid origin square

# loop
⏰ 🎮⌛ => ⏰ ⌛ 💗⌛ 🎮 ⏲
  # time listener. Every time input action is resolved: 
    # tick time ⌛
    # tick health check 💗⌛
    # create a new action 🎮
    # add to total steps ⏲
  # TODO: need to propagate ⌛ across whole grid

# listeners
👣 <=> target_square_listener
⬆ <=> up_listener # (e.g. square one up from player if 👣(🧍) )
⬇ <=> down_listener
⬅ <=> left_listener
➡ <=> right_listener
👣 => 👣 ⬆ ⬇ ⬅ ➡  # given a target square, get relative listeners (default grid behavior)
👣(🧍) => 👣(🧍) ⬆3 ⬇3 ⬅4 ➡4  # player can see 3 up/down 4 left/right
# e.g. ⬆(🟩) 👣(🧟‍♂️) # a square contains a zombie and above it is a grass square
# rules using listeners should be universal irregardless of which square is being applied 👣
# 👣(🧍) is the prototypical example though (current square player standing in)
# ⬆ ⬇ ⬅ ➡ are always relative to 👣
# advanced:
# "two squares up from 👣 contains water": ⬆2(🟦)
# "two squares up 1 right from 👣 contains water": ⬆2➡(🟦)

# game state:
❗98 💗⌛ => 🏁 # no health, game over
# if alive, chance of regen health over time:
❗99 💧 ⚡ 🍖 💗 💗⌛10 => 💧 ⚡ 🍖 💗2 🏆0.1  # every 10 turns regen health if nonempty stats
❗99 💗 💗⌛10 🏆0.1 => # if any empty stats, every 10 turns lose a health
❗98 ⏲10000 => 🏁 # timeout game over

# grid squares:
🟩 <=> grass
🟫 <=> dirt
⬜ <=> stone
🟦 <=> water
🟥 <=> lava
🟨 <=> sand
⬛ <=> level_edge

# object squares:
🌳 <=> tree
🧰 <=> workbench
🥈 <=> iron
🖤 <=> coal
🔥 <=> furnace
💎 <=> diamond

# entity squares:
🐄 <=> cow
🧟‍♂️ <=> zombie
☠️ <=> skeleton
🏹 <=> arrow => #(any dir)
  🏹➡ <=> arrow_facing_right
  🏹⬆ <=> arrow_facing_up
  🏹⬇ <=> arrow_facing_down
  🏹⬅ <=> arrow_facing_left
  🏹➡ <=> arrow_facing_right
🧍 <=> player => #(any dir)
  🧍⬆ <=> player_facing_up
  🧍⬇ <=> player_facing_down
  🧍⬅ <=> player_facing_left
  🧍➡ <=> player_facing_right

# general squares: (inferred, only used for general rules)
🔲 <=> walkable_square => 🟩 | 🟫 | 🟨 
🔳 <=> placeable_square => 🟩 | 🟫 | 🟨 | 🟦 | 🟥
❎ <=> blocked_square => ⬜ | 🟦 | 🟥 | ⬛
🔄 <=> directions => ⬆ | ⬇ | ⬅ | ➡
⏹️ <=> any_square => 🟩 | 🟫 | ⬜ | 🟦 | 🟥 | 🟨 | ⬛ | 🧰 | 🥈 | 🖤 | 🔥 | 💎 
🚺 <=> entity_block => 🌳 | 🐄 | 🧟‍♂️ | ☠️ | 🧍 
☑️ <=> interactive_block => 🚺 | ⬜ | 🥈 | 🖤 | 💎

#player inventory/status
💗 <=> health
❗ 💗10 => 💗9 # max health
⚡ <=> energy
❗ ⚡10 => ⚡9 # max energy
🍗 <=> food
❗ 🍗10 => 🍗9 # max food
💧 <=> water
❗ 💧10 => 💧9 # max water


#actions:
# todo number 0 to 16
🎮 => # actions:
  🚫 <=> no_action
  👈 <=> move_left
  👉 <=> move_right
  👆 <=> move_up
  👇 <=> move_down
  🖐 <=> do_action
  💤 <=> sleep
  🤏⛰ <=> place_stone
  🤏🧰 <=> place_workbench
  🤏🔥 <=> place_furnace
  🤏🌳 <=> place_plant
  🧰⛏️🤎 <=> make_wood_pickaxe
  🧰⛏️⛰ <=> make_stone_pickaxe
  🧰⛏️🥈 <=> make_iron_pickaxe
  🧰⚔️🤎 <=> make_wood_sword
  🧰⚔️⛰ <=> make_stone_sword
  🧰⚔️🥈 <=> make_iron_sword

# action requirements:
🚫 => 🎮⌛  # no action, do nothing
⬆(🔲) 👣(🧍) 👆 => 🎮⌛ ⬆(🔲 🧍) 👣(⬆) # flat square to move to 
⬆(🟥) 👣(🧍) 👆 => 🎮⌛ ⬆(🟥 🧍) 👣(⬆) # can also walk into lava
  # note: also need to update player position listeners
  # and do player position change (idea: 👣(⬆) moves the target square up)
# <see DO actions below>
❗ ⚡9 💤 => 🎮⌛   # sleep command does nothing (or ends) if full energy
💤 => ⚡ 💤 🎮⌛  # start sleep tick
❗ 💤 🎮 => ⚡ 💤 🎮⌛  # continue sleeping, eating player action
⬆(🔳) 👣(🧍) ⛰ 🤏⛰ => 🎮⌛ ⬆(⬜) 👣(🧍)   # place stone
⬆(🔳) 👣(🧍) 🤎2 🤏🧰 => 🎮⌛ ⬆(🧰) 👣(🧍)  # place workbench
⬆(🔳) 👣(🧍) ⛰4 🤏🔥 => 🎮⌛ ⬆(🔥) 👣(🧍)  # place furnace
⬆(🟩) 👣(🧍) 🌱 🤏🌱 => 🎮⌛ ⬆(🌱) 👣(🧍)  # place plant
🤎 ⬆(🧰) 👣(🧍) 🧰⛏️🤎 => 🎮⌛  ⬆(🧰) 👣(🧍) ⛏️🤎  # make wood pickaxe (near workbench)
🤎 ⛰ ⬆(🧰) 👣(🧍) 🧰⛏️⛰ => 🎮⌛ ⬆(🧰) 👣(🧍) ⛏️⛰  # make stone pickaxe
🤎 ⬆(🧰) 👣(🧍) 🧰⚔️🤎 => 🎮⌛ ⬆(🧰) 👣(🧍) ⚔️🤎  # make wood sword
⛰ ⬆(🧰) 👣(🧍) 🧰⚔️⛰ => 🎮⌛ ⬆(🧰) 👣(🧍) ⚔️⛰  # make stone sword
# ... x4 dirs all above
🤎 🖤 🥈 ⬆(🧰) 👣(🧍) ➡(🔥) 🧰⚔️🥈 => 🎮⌛ ⬆(🧰) 👣(🧍) ➡(🔥) ⚔️🥈  # make iron sword (near workbench and furnace)
🤎 🖤 🥈 ⬆(🧰) 👣(🧍) ➡(🔥) 🧰⛏️🥈 => 🎮⌛ ⬆(🧰) 👣(🧍) ➡(🔥) ⛏️🥈  # make iron pickaxe
# ... x4x3 dir combos of 🧰 and 🔥
# TODO: do-nothing actions if invalid reqs

# DO actions:hand
⬆(🟦) 👣(🧍⬆) 🖐 => 🎮⌛ ⬆(🟦) 💧 👣(🧍⬆) # drink water
⬆(🌳) 👣(🧍⬆) 🖐 => 🎮⌛ 🤎 👣(🧍⬆) # chop tree
⬆(🟩) 👣(🧍⬆) 🖐 => 🎮⌛ ⬆(🟩) 🌱 👣(🧍⬆) # gather seedling
⬆(🍎) 👣(🧍⬆) 🖐 => 🎮⌛ ⬆(🍏) 🍗6 👣(🧍⬆) # eat fruit
⬆(🐄) 👣(🧍⬆) 🖐 => 🎮⌛ 🍗6 👣(🧍⬆) # eat cow
⬆(⬜) 👣(🧍⬆) ⛏️🤎 🖐 => 🎮⌛ ⬆(🟫) ⛏️🤎 ⛰ 👣(🧍⬆) # mine stone
⬆(⬜) 👣(🧍⬆) ⛏️⛰ 🖐 => 🎮⌛ ⬆(🟫) ⛏️⛰ ⛰ 👣(🧍⬆) # mine stone
⬆(⬜) 👣(🧍⬆) ⛏️🥈 🖐 => 🎮⌛ ⬆(🟫) ⛏️🥈 ⛰ 👣(🧍⬆) # mine stone
⬆(🥈) 👣(🧍⬆) ⛏️⛰ 🖐 => 🎮⌛ ⬆(🟫) ⛏️⛰ 🥈 👣(🧍⬆) # mine stone
⬆(🥈) 👣(🧍⬆) ⛏️🥈 🖐 => 🎮⌛ ⬆(🟫) ⛏️🥈 🥈 👣(🧍⬆) # mine stone
⬆(🖤) 👣(🧍⬆) ⛏️⛰ 🖐 => 🎮⌛ ⬆(🟫) ⛏️⛰ 🖤 👣(🧍⬆) # mine coal
⬆(🖤) 👣(🧍⬆) ⛏️🥈 🖐 => 🎮⌛ ⬆(🟫) ⛏️🥈 🖤 👣(🧍⬆) # mine coal
⬆(💎) 👣(🧍⬆) ⛏️🥈 🖐 => 🎮⌛ ⬆(🟫) ⛏️🥈 💎 👣(🧍⬆) # mine diamond
# ... x4 dirs

# combat:
# attacking:
⬆(🧟‍♂️) 👣(🧍⬆) ⚔️🤎 🖐 => 🎮⌛ ⬆(🧟‍♂️ 🧟‍♂️💔) 👣(🧍⬆) ⚔️🤎  # hurt zombie
⬆(🧟‍♂️) 👣(🧍⬆) ⚔️⛰ 🖐 => 🎮⌛ ⬆(🧟‍♂️ 🧟‍♂️💔2) 👣(🧍⬆) ⚔️⛰  # hurt zombie stone sword
⬆(🧟‍♂️) 👣(🧍⬆) ⚔️🥈 🖐 => 🎮⌛ ⬆(🧟‍♂️ 🧟‍♂️💔3) 👣(🧍⬆) ⚔️🥈  # kill zombie with iron sword
❗ 🧟‍♂️💔3 🧟‍♂️ => # destroy zombie when it has 3 damage (#TODO 👣(🧟‍♂️💔3 🧟‍♂️) =>
❗2 🧟‍♂️💔4 => 🧟‍♂️💔3 # max dmg
# ... same for skeleton, and x4 dirs


# defending:
⬆(🧟‍♂️) 👣(🧍) ⌛ => 💔2 ⬆(🧟‍♂️) 👣(🧍)  # zombie attacks player
❗ ⬆(🏹⬇) 👣(🧍) ⌛ => 💔2 👣(🧍)  # arrow hits player
# ... x4 dirs
# lava:
👣(🧍 🟥) => 👣(🧍 🟥) 💔9 # hp disappears in lava (instantly)
❗ 💔 💗 => # resolve hurt, remove hp

# entity movement:
👣(🏹➡) ➡(🔲) ⌛ => ➡(🏹➡) # arrows maintain direction
🎲25 👣(🐄) ⬆(🔲) ⌛ => 🎲25 ⬆(🐄) # cows can move any direction, randomly
🎲50 👣(🐄) ⬇(🔲) ⌛ => 🎲50 ⬇(🐄)
🎲75 👣(🐄) ⬅(🔲) ⌛ => 🎲75 ⬅(🐄)
🎲100 👣(🐄) ➡(🔲) ⌛ => 🎲100 ➡(🐄)
# enemies:
👣(🧟‍♂️) ➡(🔲) ⌛ => ➡(🧟‍♂️) # zombies can move any direction (TODO not random, need player position logic)
👣(☠️) ➡(🔲) ⌛ => ➡(☠️) # skeletons can move any direction
# ... x4 dirs
# fruit growth:
🎲 👣(🍏) ⌛ => 🎲 👣(🍏) # no change 99% of the time (not ripe)
🎲100 👣(🍏) ⌛ => 🎲100 👣(🍎) # grows apples 1% of the time (ripen)





# achievements:
🏆🤎 <=> achievement_collect_wood
🏆🧰 <=> achievement_place_workbench # aka table
🏆🐄 <=> achievement_create_eat_cow
🏆🌱 <=> achievement_collect_sapling
🏆💧 <=> achievement_collect_drink
🏆⛏️🤎 <=> achievement_create_wood_pickaxe
🏆⚔️🤎 <=> achievement_create_wood_sword
🏆🍏 <=> achievement_place_plant
🏆🧟‍♂️ <=> achievement_defeat_zombie
🏆⛰ <=> achievement_collect_stone
🏆⬜ <=> achievement_place_stone
🏆🍎 <=> achievement_eat_plant
🏆☠️ <=> achievement_defeat_skeleton
🏆⛏️⛰ <=> achievement_create_stone_pickaxe
🏆⚔️⛰ <=> achievement_create_stone_sword
🏆💤 <=> achievement_wake_up
🏆🔥 <=> achievement_place_furnace
🏆🖤 <=> achievement_collect_coal
🏆🥈 <=> achievement_collect_iron
🏆💎 <=> achievement_collect_diamond
🏆⛏️🥈 <=> achievement_create_iron_pickaxe
🏆⚔️🥈 <=> achievement_create_iron_sword

# requirements: 
🏆🤎✔ <=> achievement_collect_wood_requirements
🏆🧰✔ <=> achievement_place_workbench_requirements
# ...

# achievements build tree:
🏆🤎✖ 🏆🤎✔ => 🏆 🏆🤎
🏆🤎 🏆🧰✖ 🏆🧰✔ => 🏆 🏆🤎 🏆🧰
🏆🐄✖ 🏆🐄✔ => 🏆 🏆🐄
🏆🌱✖ 🏆🌱✔ => 🏆 🏆🌱

🏆💧✖ 🏆💧✔ => 🏆 🏆💧
🏆🧰 🏆⛏️🤎✖ 🏆⛏️🤎✔ => 🏆 🏆🧰 🏆⛏️🤎
🏆🧰 🏆⚔️🤎✖ 🏆⚔️🤎✔ => 🏆 🏆🧰 🏆⚔️🤎
🏆🌱 🏆🍏✖ 🏆🍏✔ => 🏆 🏆🌱 🏆🍏

🏆🧟‍♂️✖ 🏆🧟‍♂️✔ => 🏆 🏆🧟‍♂️
🏆⛏️🤎 🏆⛰✖ 🏆⛰✔ => 🏆 🏆⛏️🤎 🏆⛰
🏆⛰ 🏆⬜✖ 🏆⬜✔ => 🏆 🏆⛰ 🏆⬜
🏆🍏 🏆🍎✖ 🏆🍎✔ => 🏆 🏆🍏 🏆🍎

🏆☠️✖ 🏆☠️✔ => 🏆 🏆☠️
🏆⛰ 🏆⛏️⛰✖ 🏆⛏️⛰✔ => 🏆 🏆⛰ 🏆⛏️⛰
🏆⚔️🤎 🏆⚔️⛰✖ 🏆⚔️⛰✔ => 🏆 🏆⚔️🤎 🏆⚔️⛰
🏆💤✖ 🏆💤✔ => 🏆 🏆💤

🏆⛰ 🏆🔥✖ 🏆🔥✔ => 🏆 🏆⛰ 🏆🔥
🏆⛏️🤎 🏆🖤✖ 🏆🖤✔ => 🏆 🏆⛏️🤎 🏆🖤
🏆⛏️⛰ 🏆🥈✖ 🏆🥈✔ => 🏆 🏆⛏️⛰ 🏆🥈

🏆⛏️🥈 🏆💎✖ 🏆💎✔ => 🏆 🏆⛏️🥈 🏆💎
🏆🔥 🏆🖤 🏆🥈 🏆⛏️🥈✖ 🏆⛏️🥈✔ => 🏆 🏆🔥 🏆🖤 🏆🥈 🏆⛏️🥈
🏆🔥 🏆🖤 🏆🥈 🏆⚔️🥈✖ 🏆⚔️🥈✔ => 🏆 🏆🔥 🏆🖤 🏆🥈 🏆⚔️🥈
# explanation: requires zero-quantity ✖ to produce, ensuring it's only done once
# i.e. flipped bit
# TODO could avoid the above ✖ ✔ stuff by putting achievement conditions (including prereqs) in the actions themselves
# but we do this all so there's just a single generation of 🏆 counter



#TODO:
# inputs: just 64x64x3 as input image states

# spawning / despawning entities
- zombies/cows grassland, skeletons caves
- more zombies at night
- lower visibility at night

# rewards (score +-0.1 per hp, +1 per achievement)
- geometric mean of success rates

# status checks:
- see food (water, resource, enemy etc...)
- can move to target (no tools)
- can move to target with tools

# general strategy:
- hiding from enemies in enclosed spaces
- avoiding lava
- avoiding projectiles
- only fighting with weapons
- eating food
- pathfinding






=====================================================================
# above was a "perfected" human-made set of rules after analyzing the program, looking for what an eventual system might approximate

# below is a ground-up attempt at discovery (human simulated), using only input data ("64x64 images") and inference from that
# where applicable we call non-axiom programs (e.g. ocr) to get data

# Below is an attempted "blind world model building" of the following video:
# https://www.youtube.com/watch?v=2bALHna35os

🎬 => 📷 ⏰               # start with a picture and knowledge of time
📷 <=> 📷💻(❔) 📷⌨(❔)         # split image into screen and interface (LMM, detect sections)
📷⌨(❔) => 📷⌨(💗9 🍗9 💧9 ⚡9)   # split interface into inventory tokens (OCR and LLM)
📷💻(❔) => ⏹↔9 ⏹↕7         # split screen into 9x7 grid  (TODO grid size from paper not inferred from screen...)
# CRITIQUE: grid inferred by fiat not from inferring screen
⏹↔9 ⏹↕7 => ⏹↔↕(❔) ... ⏹↔5↕4(❔) ... ⏹↔9↕7(❔) # use image cutter to make 63 squares, each with their own contents and position (1,1 to 9,7).  mark each as unknown
⏹️ => ⏹↔↕ | ⏹↔2↕ | ... | ⏹↔9↕7  # generalize any-square relation
⏹↔4↕3(❔) => ⏹↔4↕3(🧍⬇ 🟩)   # mark player in the center square (standing on grass).  (visual analysis LMM)
⏹(❔) => ⏹(🟩)              # mark all as having grass (visual analysis LMM)
⏹↔8↕(❔) => ⏹↔8↕(🌳)        # mark one square as tree (visual analysis LMM)
🎮 => 🎮#1 | ... | 🎮#17     # known actions, but let's just assume it only knows 1-17 int inputs
  🎮#1 <=> 🚫 <=> no_action   # etc...
  🎮#2 <=> 👈 <=> move_left
  👉 <=> move_right
  👆 <=> move_up
  👇 <=> move_down
  🖐 <=> do_action
  💤 <=> sleep
  🤏⛰ <=> place_stone
  🤏🧰 <=> place_workbench
  🤏🔥 <=> place_furnace
  🤏🌳 <=> place_plant
  🧰⛏️🤎 <=> make_wood_pickaxe
  🧰⛏️⛰ <=> make_stone_pickaxe
  🧰⛏️🥈 <=> make_iron_pickaxe
  🧰⚔️🤎 <=> make_wood_sword
  🧰⚔️⛰ <=> make_stone_sword
  🧰⚔️🥈 <=> make_iron_sword
⏰ => ⏰ 🎮     # allow time to pass and a command is created
🎮 => 🎮#4    # choose action 4 (move_up, but unknown so far)
  # note: everything with ... implies it doesnt know what other parts of the state mattered, so it includes the whole state
  🎮#4 ⏹️↔8↕(🌳) ⏹️↔4↕3(🧍⬇) ... => ⏹️↔4↕3(🧍⬆) ⏹️↔8↕2(🌳) ⏹️↔6↕(🌳) ...  
    # player moves up, tree moves down 
    # the grass movement isnt obvious yet
    # spawns new tree in above row
# poll LLM on previous changes: it probably guesses:
  🎮#4 <=> 👆 <=> move_up
  # when asked to guess implied rules:
  ⏹️↔x↕y(...) 🎮#4 => ⏹️↔x↕y+1(...) and  # move all square contents down by 1
  ⏹️↔4↕3(🧍⬇) 🎮#4 => ⏹️↔4↕3(🧍⬆)  # rotate char up (subsequent re-polls may generalize 🧍⬇ to 🧍) 
  🎮#4 => ⏹️↔x↕(❔) # new top row
  # it probably does not get that:
  ⏹️↔x↕8 🎮#4 => # but disappear the bottom row (or store to memory) 
# ... repeat above for more actions (up up up right right)
# then new command:
  ⏹️↔4↕3(🧍➡) ⏹️↔5↕3(🌳) 🎮#6 ... => ⏹️↔4↕3(🧍➡) ... 📷⌨(🤎1)  # done via lmm / ocr of inventory
  # new action button, tree disappeared and new item in inventory
  # (may or may not guess that player must be facing tree.  but will confirm that in subsequent action presses)
  # probably guesses:
  🎮#6 <=> 🪓🌳 <=> chop_tree # which is wrong (just one possible action) but dont know yet
# surprise: arrow
  🎮#4 => ⏹️↔1↕3(🏹➡)  # it thinks might be tied to up action cuz it doesnt know
  🎮#4 ⏹️↔1↕3(🏹➡) => ⏹️↔2↕4(🏹➡)
  🎮#4 ⏹️↔2↕4(🏹➡) => ⏹️↔3↕5(🏹➡)
  🎮#4 ⏹️↔3↕5(🏹➡) => ⏹️↔4↕6(🏹➡)
  🎮#6 ⏹️↔4↕6(🏹➡) ⏹️↔1↕6(☠️) => ⏹️↔5↕6(🏹➡) # surprise skeleton!
  # ask LLM: probably gets that skeleton npc appeared and can shoot arrows
  ⏹️↔x↕y(☠️) => ⏹️↔x↕y(☠️) ⏹️↔x+1↕y(🏹➡)
  ⏹️↔x↕y(☠️) => ⏹️↔x+1↕y(☠️) | ⏹️↔x↕y+1(☠️) | ⏹️↔x-1↕y(☠️) | ⏹️↔x↕y-1(☠️) # and can move any dir
  ⏹️↔x↕y(🏹➡) => ⏹️↔x+1↕y(🏹➡) # and probably gets that arrows move
  # probably gets that this is independent of the action 🎮 used
# NOTE: timing is incorrect here so far.  e.g. how do we mark rules that require changes
  # probably need to pass 🎮#4 to each grid square
# small surprise: water 🟦 and sand 🟨
  # ...
# small surprise: stone ⬜ dirt 🟫 iron 🥈 (🟧) on stone
# surprise: cow 🐄 on grass
  # eat cow:
  ⏹️↔4↕3(🧍➡) ⏹️↔5↕3(🐄) 🎮#6 ... 📷⌨(💧9) => ⏹️↔4↕3(🧍➡) 📷⌨(💧8) ...  
    # confusing lol.  eating cow made you thirsty.
  🎮#6 <=> 👄🐄 <=> eat_cow # likely LMM guess
  🎮#6 <=> interact # likely guesses more general purpose based on previous rules
# ...
# surprise: energy down
🎮#3 📷⌨(⚡9) ... => 📷⌨(⚡8) ...
# surprise: make workbench
  🎮#9 ⏹️↔4↕3(🧍➡) ⏹️↔5↕3(🟩) 📷⌨(🤎3) ... => ⏹️↔4↕3(🧍➡) ⏹️↔5↕3(🧰) 📷⌨(🤎2) ...
  # LLM guess:
  🎮#9 <=> 🤏🧰 <=> place_workbench
  # if asked to generalize to just the relevant tokens it thinks for the rule, probably correctly guesses 1 wood cost and facing square
# surprise: pickaxe 
  🎮#12 ⏹️↔4↕3(🧍➡) 📷⌨(🤎2) ... => ⏹️↔4↕3(🧍➡) 📷⌨(🤎1 ⛏️🤎)  ...
  # LLM guess:
  🎮#12 <=> 🧰⛏️🤎 <=> make_wood_pickaxe
  # probably correctly guesses 1 wood cost, may not get needs to be near workbench yet
# minor surprise: mine stone
  🎮#6 ⏹️↔4↕3(🧍➡) ⏹️↔5↕3(⬜) ... => ⏹️↔4↕3(🧍➡) ⏹️↔5↕3(🟫) 📷⌨(⛰1)  ...
  # create one stone in inventory, stone wall => dirt
  # ask LLM "besides the changing state tokens, which other tokens might be relevant to this rule"
    # probably gets that pickaxe needed
# minor surprise: create stone sword ...
# minor surprise: random thirsty ...
# minor surprise: zombie
# minor surprise: stone pickaxe
# minor surprise: eat cow raises food to 9
# minor surprise: drink water raises water by 1
# minor surprise: iron mine
  # LLM may not guess it needs stone pickaxe
# minor surprise: coal
# minor surprise: arrows stop at stone
# minor surprise: place stone in dirt
# surprise: screen darken then sleep
  ⏹️ => ⏹️(🕶) # add darkness to each square that just happens each step (lots of surprise)
    # marks new squares entirely, LMM could guess they're just darkening
  🎮#7 ⏹️↔4↕3(🧍) ... => ⏹️↔4↕3(🧍💤) 📷⌨(⚡) ...
  🎮#7 <=> 💤 <=> sleep
  ⏹️(🕶) => ⏹️ # lighten each square in dawn (each step)
# minor surprise: lava
# surprise: hp down from zombie
# surprise: hp down from arrow
# surprise: water from 1 to 0 (no consequence yet)
# surprise: kill zombie (using 🎮#6)
# surprise: gather sapling (from 🟩)
# surprise: plant sapling
# surprise: hp down when food is 0
  # might be hard for LLM to guess this one but it'll figure it out eventually
# minor surprise: furnace
# minor surprise: iron pickaxe
# minor surprise: kill skeleton
# minor surprise: place stone in water
# minor surprise: fruit growth (seems random)
# minor surprise: diamond
# surprise: walk in lava
  ⏹️↔4↕3(🧍➡) ⏹️↔5↕3(🟥) 🎮#6 ... 📷⌨(💗9) => ⏹️↔4↕3(🧍➡ 🟥) ... 
  # lose all hp
  # game ends




